Programm           = 'Program' Identifier ';' { Function_Dec } 'BEGIN' StatementSequence 'END'.
Function_Dec       = [Type] Identifier FormalParameters '{' StatementSequence ['return' Expression] '}'.
FormalParameters   = '(' [ Type Variable ] { ',' Type Variable } ’)’.
ActualParameters   = '(' [ Right_Side { ',' Right_Side } ] ')'.

StatementSequence  = { Statement }
Statement          = (Declaration ';') | (Assignment ';') | IF_Statement | FOR_Statement | WHILE_Statement | DO_WHILE_Statement
                     ( 'scan' '(' Variable ')' ';' ) | ( 'print' '(' Variable | String ')' ';' ).
Declaration        = { Var_Dec | Struct_Dec }

Var_Dec            = Type Variable [ Dec_opts ]	{ ',' Variable [ Dec_opts ] }.
						
Dec_opts           = ('=' Expression) | ( [' UnsignedInteger ']' {'[' UnsignedInteger ']'} ).

// eine Struktur(Record) wird beim parsen zu Type Liste mit Identifier als Name hinzugefugt. Mit der IdentList kann sie gleich instanziiert werden.
Struct_Dec         = 'struct' Identifier FieldlList [ IdentList ] ';'.
FieldlList         = '{' Var_Dec { ';' Var_Dec } '}'.
IdentList          = Identifier { ',' Identifier }.

Assignment         = Variable [Selector] '=' Expression

IF_Statement       = 'if' '(' Expression ')' '{' StatementSequence '}' [ 'else' '{' StatementSequence '}' ].
FOR_Statement      = 'for' '(' For_Expression ')' '{' StatementSequence '}'.
WHILE_Statement    = 'while' '(' Expression ')' '{' StatementSequence '}'.
DO_WHILE_Statement = 'do' '{' StatementSequence '}' 'while' '(' Expression ')' ';'.

For_Expression     = Assignment ';' Expression ';' Assignment.

Type               = ('int' | 'float' | 'char' | 'bool' | 'cstring' | Identifier) [ '[' ']' ].
Variable           = Identifier.
Identifier         = Letter { (Letter | Digit | '_') }.

Expression         = Part1 { ('+' | '-') Part1 }.
Part1              = Part2 { ('>' | '<' | '==' | '>=' | '<=' | '!=') Part2 }.
Part2              = Part3 { ('*' | '/') Part3 }.
Part3              = [('+' | '-')] Part4.
Part4              = ( Part5 | ( Identifier ActualParameters ).
Part5              = ( UnsignedInteger | Identifier [Selector] ) | ( '(' Expression')' ).

Selector           = {'.' ident | '[' Expression ']'}.

UnsignedInteger    = Digit | ( NotNullDigit { Digit } ).
SignedInteger      = ['-'] UnsignedInteger.
Float              = SignedInteger '.' UnsignedInteger.
Letter             = 'a' | ... | 'z' | 'A' | ... | 'Z'.
Digit              = '0' | ... | '9'.
NotNullDigit       = '1' | ... | '9'.
String             = '"' { Symbol } '"'.
Symbol             = x	(x  is from ASCI).